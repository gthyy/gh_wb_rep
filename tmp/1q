#include "stdio.h"
#include <string.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

void kmp_build_array(const char* pattern, unsigned int length, unsigned int* next)
{
    unsigned int i, t;

    i = 1;
    t = 0;
    next[1] = 0;

    while(i < length + 1)
    {
        while(t > 0 && pattern[i - 1] != pattern[t - 1])
        {
            t = next[t];
        }

        ++t;
        ++i;

        if(pattern[i - 1] == pattern[t - 1])
        {
            next[i] = next[t];
        }
        else
        {
            next[i] = t;
        }
    }

    /* pattern末尾的结束符控制，用于寻找目标字符串中的所有匹配结果用 */
    while(t > 0 && pattern[i - 1] != pattern[t - 1])
    {
        t = next[t];
    }

    ++t;
    ++i;

    next[i] = t;
}

unsigned int kmp_match(const char* text, unsigned int text_length, const char* pattern, unsigned int pattern_length, unsigned int* matches)
{
    unsigned int i, j, n;
    unsigned int next[pattern_length + 2];

    kmp_build_array(pattern, pattern_length, next);

    i = 0;
    j = 1;
    n = 0;

    while(pattern_length + 1 - j <= text_length - i)
    {
        if(text[i] == pattern[j - 1])
        {
            ++i;
            ++j;

            /* 发现匹配结果，将匹配子串的位置，加入结果 */
            if(j == pattern_length + 1)
            {
                matches[n++] = i - pattern_length;
                j = next[j];
                break;
            }
        }
        else
        {
            j = next[j];

            if(j == 0)
            {
                ++i;
                ++j;
            }
        }
    }

    /* 返回发现的匹配数 */
    return n;
}

char white_list_test[512*1024*1024];

char black_list_test[512*1024*1024];

//char *white_list_test=new char[512*1024*1024];/* IP地址映射到本地内存数据的数组 */
//char *black_list_test=new char[512*1024*1024];/* IP地址映射到本地内存数据的数组 */
/* http://www.cnblogs.com/Beta-TNT/p/4724015.html */
/* unsigned int src_inaddr = ntohl(tph->saddr); */
/* 查询IP是否在黑名单里，仅仅需要三次位运算和一次内存访问 */
unsigned int check_black_list(unsigned int input_ip)
{
    return black_list_test[input_ip>>3] &(1<<(input_ip & (unsigned int)7));
}

/* 查询IP是否在白名单里，仅仅需要三次位运算和一次内存访问 */
unsigned int check_white_list(unsigned int input_ip)
{
    return white_list_test[input_ip>>3] &(1<<(input_ip & (unsigned int)7));
}


/* 设置黑名单IP的值。找到IP对应的字节，然后使用掩码和位运算设置对应的二进制位的值 */
void set_black_value(unsigned int input_ip, unsigned int input_value)
{
    unsigned int byte_index = input_ip >> 3;
    char mask_byte = (char)(1<<(input_ip & (unsigned int)7));
    black_list_test[byte_index] = (input_value?(black_list_test[byte_index] | mask_byte):(black_list_test[byte_index] & (!mask_byte)));
}

/* 设置白名单IP的值。找到IP对应的字节，然后使用掩码和位运算设置对应的二进制位的值 */
void set_white_value(unsigned int input_ip, unsigned int input_value)
{
    unsigned int byte_index = input_ip >> 3;
    char mask_byte = (char)(1<<(input_ip & (unsigned int)7));
    white_list_test[byte_index] = (input_value?(white_list_test[byte_index] | mask_byte):(white_list_test[byte_index] & (!mask_byte)));
}

/* 读内存方式 */
unsigned int calc_max_min(char *line_buf)
{
    unsigned int ip_len    = 0;
    unsigned int matches   = 0;
    unsigned int match_num = 0;
    unsigned int net_count = 0;
    unsigned int index     = 0;
    char *first_pos        = line_buf;
    char *second_pos       = NULL;
    unsigned int ip_addr_min = 0;
    unsigned int ip_addr_max = 0;
    unsigned int mask_low    = 0;
    unsigned int mask_high   = 0;

    for(index = 0;index<strlen(line_buf);index++)
    {
        if((line_buf[index]) >= '0' && (line_buf[index]) <= '9')
        {
            first_pos = &line_buf[index];
            break;
        }
    }

    match_num = kmp_match(line_buf,strlen(line_buf),"/",strlen("/"),&matches);
    if(0 == match_num){

        printf("calc_max_min kmp match fail!\n");
        return(-1);
    }

    second_pos += matches + strlen("/");
    net_count = atoi(second_pos);

    ip_len = second_pos - first_pos - 2;

    mask_low  = 0xFFFFFFFF << (32 - net_count);
    mask_high = 0xFFFFFFFF >> net_count;

    ip_addr_min = (unsigned int)inet_addr(first_pos);
    ip_addr_min = ip_addr_min & mask_low;
    ip_addr_max = ip_addr_min | mask_high;

    for(index = ip_addr_min;index <= ip_addr_max;index++)
    {
        set_black_value(index,1);
    }

}


int main(int argc,char **argv)
{
    printf("argv[1] = %s\n",argv[1]);
    calc_max_min(argv[1]);
    printf("done\n");
    return 0;
}














